// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251016052945_AddDrillPointCompletionFields")]
    partial class AddDrillPointCompletionFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConnectorType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<bool>("IsStartingHole")
                        .HasColumnType("bit");

                    b.Property<string>("Point1DrillPointId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Point2DrillPointId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Sequence");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.HasIndex("Point1DrillPointId", "ProjectId", "SiteId");

                    b.HasIndex("Point2DrillPointId", "ProjectId", "SiteId");

                    b.ToTable("BlastConnections", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.DetonatorInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("DrillPointId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("DrillPointId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.HasIndex("DrillPointId", "ProjectId", "SiteId");

                    b.ToTable("DetonatorInfos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.SiteBlastingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId", "DataType")
                        .IsUnique();

                    b.ToTable("SiteBlastingData");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillHole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ActualDepth")
                        .HasColumnType("float");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Depth")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double?>("Dip")
                        .HasColumnType("float");

                    b.Property<decimal>("Easting")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Elevation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Northing")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Stemming")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DrillHoles");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPoint", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("ANFO")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Burden")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Diameter")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.89000000000000001);

                    b.Property<double>("Emulsion")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<double>("Spacing")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Stemming")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(3.0);

                    b.Property<double>("Subdrill")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.0);

                    b.Property<double>("X")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.HasIndex("X", "Y", "ProjectId", "SiteId");

                    b.ToTable("DrillPoints", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.ExplosiveCalculationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AnfoCoveringSpace")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("AnfoDensity")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("AnfoPerMeter")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("AverageDepth")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<string>("CalculationId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("EmulsionCoveringSpace")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EmulsionDensity")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EmulsionPerHole")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EmulsionPerMeter")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFilledHoles")
                        .HasColumnType("int");

                    b.Property<int>("OwningUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PatternSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double>("RemainingSpace")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAnfo")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalDepth")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalEmulsion")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalVolume")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId")
                        .IsUnique();

                    b.HasIndex("OwningUserId");

                    b.HasIndex("PatternSettingsId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId")
                        .IsUnique()
                        .HasDatabaseName("IX_ExplosiveCalculationResults_ProjectSite_Unique");

                    b.HasIndex("ProjectId", "SiteId", "CreatedAt")
                        .HasDatabaseName("IX_ExplosiveCalculationResults_ProjectSite_CreatedAt");

                    b.ToTable("ExplosiveCalculationResults", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.PatternSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Burden")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(2.5);

                    b.Property<double>("Depth")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(10.0);

                    b.Property<double>("Diameter")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.89000000000000001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Spacing")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(3.0);

                    b.Property<double>("Stemming")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(3.0);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.ToTable("PatternSettings");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.ANFOTechnicalProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CentralWarehouseInventoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Density")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("DetonationVelocity")
                        .HasColumnType("int");

                    b.Property<decimal>("FuelOilContent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("FumeClass")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<decimal?>("MoistureContent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("PrillSize")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime?>("QualityCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QualityStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("StorageHumidity")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("StorageTemperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("WaterResistance")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("None");

                    b.HasKey("Id");

                    b.HasIndex("CentralWarehouseInventoryId")
                        .IsUnique();

                    b.ToTable("ANFOTechnicalProperties", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ANFOTechnicalPropertiesId")
                        .HasColumnType("int");

                    b.Property<decimal>("AllocatedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValue(0m);

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CentralWarehouseStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("EmulsionTechnicalPropertiesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExplosiveType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ManufacturerBatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("BatchId")
                        .IsUnique();

                    b.HasIndex("CentralWarehouseStoreId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("ExplosiveType");

                    b.HasIndex("Status");

                    b.HasIndex("Supplier");

                    b.ToTable("CentralWarehouseInventories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.EmulsionTechnicalProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ApplicationTemperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("BubbleSize")
                        .HasColumnType("int");

                    b.Property<int>("CentralWarehouseInventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ColorConsistency")
                        .HasColumnType("bit");

                    b.Property<bool?>("Crystallization")
                        .HasColumnType("bit");

                    b.Property<decimal>("DensitySensitized")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("DensityUnsensitized")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int?>("DetonationVelocity")
                        .HasColumnType("int");

                    b.Property<int>("FumeClass")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("PhaseSeparation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("QualityCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QualityStatus")
                        .HasColumnType("int");

                    b.Property<int>("SensitizationType")
                        .HasColumnType("int");

                    b.Property<decimal?>("SensitizerContent")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("StorageTemperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Viscosity")
                        .HasColumnType("int");

                    b.Property<decimal>("WaterContent")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("WaterResistance")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Excellent");

                    b.Property<decimal>("pH")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.HasKey("Id");

                    b.HasIndex("CentralWarehouseInventoryId")
                        .IsUnique();

                    b.ToTable("EmulsionTechnicalProperties", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.InventoryTransferRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ApprovedQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CentralWarehouseInventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedTransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeliveryConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DispatchNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DispatchedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DriverContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DriverName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TruckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CentralWarehouseInventoryId");

                    b.HasIndex("CompletedTransactionId");

                    b.HasIndex("DestinationStoreId");

                    b.HasIndex("DispatchDate");

                    b.HasIndex("DispatchedByUserId");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("RequestNumber")
                        .IsUnique();

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("RequiredByDate");

                    b.HasIndex("Status");

                    b.ToTable("InventoryTransferRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.QualityCheckRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CentralWarehouseInventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CheckedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Findings")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresFollowUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CentralWarehouseInventoryId");

                    b.HasIndex("CheckDate");

                    b.HasIndex("CheckType");

                    b.HasIndex("CheckedByUserId");

                    b.HasIndex("RequiresFollowUp");

                    b.HasIndex("Status");

                    b.ToTable("QualityCheckRecords", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MachineManagement.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToOperator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignedToProject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChassisDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RigNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecificationsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegionId");

                    b.HasIndex("Status");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ExplosiveApprovalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalType")
                        .HasColumnType("int");

                    b.Property<string>("BlastTiming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BlastingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnvironmentalAssessmentCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("EstimatedDurationHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpectedUsageDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectSiteId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("SafetyChecklistCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpectedUsageDate")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_ExpectedUsageDate");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("ProjectSiteId")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_ProjectSiteId");

                    b.HasIndex("RequestedByUserId")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_RequestedByUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_Status");

                    b.HasIndex("ProjectSiteId", "Status")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_ProjectSite_Status");

                    b.ToTable("ExplosiveApprovalRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId")
                        .IsUnique()
                        .HasFilter("[AssignedUserId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.HasIndex("RegionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperatorCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatternApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimulationConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSites");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(128),
                            IsActive = true,
                            Name = "Muscat",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(128)
                        },
                        new
                        {
                            Id = 2,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(138),
                            IsActive = true,
                            Name = "Dhofar",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(138)
                        },
                        new
                        {
                            Id = 3,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(141),
                            IsActive = true,
                            Name = "Musandam",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(141)
                        },
                        new
                        {
                            Id = 4,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(144),
                            IsActive = true,
                            Name = "Al Buraimi",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(144)
                        },
                        new
                        {
                            Id = 5,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(147),
                            IsActive = true,
                            Name = "Ad Dakhiliyah",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(147)
                        },
                        new
                        {
                            Id = 6,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(150),
                            IsActive = true,
                            Name = "Al Batinah North",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(150)
                        },
                        new
                        {
                            Id = 7,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(152),
                            IsActive = true,
                            Name = "Al Batinah South",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(153)
                        },
                        new
                        {
                            Id = 8,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(155),
                            IsActive = true,
                            Name = "Ash Sharqiyah South",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(155)
                        },
                        new
                        {
                            Id = 9,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(158),
                            IsActive = true,
                            Name = "Ash Sharqiyah North",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(158)
                        },
                        new
                        {
                            Id = 10,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(160),
                            IsActive = true,
                            Name = "Ad Dhahirah",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(160)
                        },
                        new
                        {
                            Id = 11,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(163),
                            IsActive = true,
                            Name = "Al Wusta",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(163)
                        });
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedExplosiveTypes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("StorageCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegionId");

                    b.HasIndex("Status");

                    b.HasIndex("StoreName");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.StoreInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExplosiveType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRestockedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaximumStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReservedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchNumber");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("ExplosiveType");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreId", "ExplosiveType")
                        .IsUnique();

                    b.ToTable("StoreInventories", t =>
                        {
                            t.HasCheckConstraint("CK_StoreInventory_MinMaxStock", "[MinimumStockLevel] IS NULL OR [MaximumStockLevel] IS NULL OR [MinimumStockLevel] <= [MaximumStockLevel]");

                            t.HasCheckConstraint("CK_StoreInventory_Quantity_NonNegative", "[Quantity] >= 0");

                            t.HasCheckConstraint("CK_StoreInventory_ReservedQuantity_LessOrEqualQuantity", "[ReservedQuantity] <= [Quantity]");

                            t.HasCheckConstraint("CK_StoreInventory_ReservedQuantity_NonNegative", "[ReservedQuantity] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.StoreTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExplosiveType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RelatedStoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreInventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExplosiveType");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("ReferenceNumber");

                    b.HasIndex("RelatedStoreId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreInventoryId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionType");

                    b.ToTable("StoreTransactions", t =>
                        {
                            t.HasCheckConstraint("CK_StoreTransaction_Quantity_Positive", "[Quantity] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Module", "Action")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(3),
                            Description = "Allows creating a new user",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Create User",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(3)
                        },
                        new
                        {
                            Id = 2,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(9),
                            Description = "Allows viewing user details",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Read User",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(9)
                        },
                        new
                        {
                            Id = 3,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(12),
                            Description = "Allows editing user details",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Update User",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(12)
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(15),
                            Description = "Allows deleting a user",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Delete User",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(15)
                        },
                        new
                        {
                            Id = 5,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(17),
                            Description = "Allows creating a new project",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Create Project",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(17)
                        },
                        new
                        {
                            Id = 6,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(19),
                            Description = "Allows viewing project details",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Read Project",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(20)
                        },
                        new
                        {
                            Id = 7,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(21),
                            Description = "Allows editing project details",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Update Project",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(22)
                        },
                        new
                        {
                            Id = 8,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(24),
                            Description = "Allows deleting a project",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Delete Project",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(24)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9704),
                            Description = "Administrator with full access",
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9706)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9711),
                            Description = "Manages blasting operations",
                            IsActive = true,
                            Name = "Blasting Engineer",
                            NormalizedName = "BLASTING_ENGINEER",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9712)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9769),
                            Description = "Manages mechanical tasks",
                            IsActive = true,
                            Name = "Mechanical Engineer",
                            NormalizedName = "MECHANICAL_ENGINEER",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9769)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9771),
                            Description = "Manages machine inventory and assignments",
                            IsActive = true,
                            Name = "Machine Manager",
                            NormalizedName = "MACHINE_MANAGER",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9772)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9774),
                            Description = "Manages explosive materials",
                            IsActive = true,
                            Name = "Explosive Manager",
                            NormalizedName = "EXPLOSIVE_MANAGER",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9774)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9776),
                            Description = "Manages store inventory",
                            IsActive = true,
                            Name = "Store Manager",
                            NormalizedName = "STORE_MANAGER",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9776)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9778),
                            Description = "Operates machinery",
                            IsActive = true,
                            Name = "Operator",
                            NormalizedName = "OPERATOR",
                            UpdatedAt = new DateTime(2025, 10, 16, 5, 29, 44, 693, DateTimeKind.Utc).AddTicks(9779)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(68),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(72),
                            IsActive = true,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(73),
                            IsActive = true,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(75),
                            IsActive = true,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(76),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(78),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(79),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(81),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            GrantedAt = new DateTime(2025, 10, 16, 5, 29, 44, 694, DateTimeKind.Utc).AddTicks(82),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OmanPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastConnection", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPoint", "Point1DrillPoint")
                        .WithMany()
                        .HasForeignKey("Point1DrillPointId", "ProjectId", "SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPoint", "Point2DrillPoint")
                        .WithMany()
                        .HasForeignKey("Point2DrillPointId", "ProjectId", "SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Point1DrillPoint");

                    b.Navigation("Point2DrillPoint");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.DetonatorInfo", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPoint", "DrillPoint")
                        .WithMany()
                        .HasForeignKey("DrillPointId", "ProjectId", "SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DrillPoint");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.SiteBlastingData", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPoint", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.ExplosiveCalculationResult", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "OwningUser")
                        .WithMany()
                        .HasForeignKey("OwningUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.PatternSettings", "PatternSettings")
                        .WithMany()
                        .HasForeignKey("PatternSettingsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwningUser");

                    b.Navigation("PatternSettings");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.PatternSettings", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.ANFOTechnicalProperties", b =>
                {
                    b.HasOne("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", "Inventory")
                        .WithOne("ANFOProperties")
                        .HasForeignKey("Domain.Entities.ExplosiveInventory.ANFOTechnicalProperties", "CentralWarehouseInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", b =>
                {
                    b.HasOne("Domain.Entities.StoreManagement.Store", "CentralWarehouse")
                        .WithMany()
                        .HasForeignKey("CentralWarehouseStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CentralWarehouse");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.EmulsionTechnicalProperties", b =>
                {
                    b.HasOne("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", "Inventory")
                        .WithOne("EmulsionProperties")
                        .HasForeignKey("Domain.Entities.ExplosiveInventory.EmulsionTechnicalProperties", "CentralWarehouseInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.InventoryTransferRequest", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", "CentralInventory")
                        .WithMany("TransferRequests")
                        .HasForeignKey("CentralWarehouseInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StoreManagement.StoreTransaction", "CompletedTransaction")
                        .WithMany()
                        .HasForeignKey("CompletedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.StoreManagement.Store", "DestinationStore")
                        .WithMany()
                        .HasForeignKey("DestinationStoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "DispatchedByUser")
                        .WithMany()
                        .HasForeignKey("DispatchedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.UserManagement.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.UserManagement.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CentralInventory");

                    b.Navigation("CompletedTransaction");

                    b.Navigation("DestinationStore");

                    b.Navigation("DispatchedByUser");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.QualityCheckRecord", b =>
                {
                    b.HasOne("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("CentralWarehouseInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "CheckedByUser")
                        .WithMany()
                        .HasForeignKey("CheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckedByUser");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Domain.Entities.MachineManagement.Machine", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany("Machines")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "Region")
                        .WithMany("Machines")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Operator");

                    b.Navigation("Project");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ExplosiveApprovalRequest", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "ProjectSite")
                        .WithMany("ExplosiveApprovalRequests")
                        .HasForeignKey("ProjectSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedByUser");

                    b.Navigation("ProjectSite");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "RegionNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedUser");

                    b.Navigation("RegionNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId");

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany("ProjectSites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.Store", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "ManagerUser")
                        .WithMany()
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManagement.Project", null)
                        .WithMany("Stores")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "Region")
                        .WithMany("Stores")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", null)
                        .WithMany("ManagedStores")
                        .HasForeignKey("UserId");

                    b.Navigation("ManagerUser");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.StoreInventory", b =>
                {
                    b.HasOne("Domain.Entities.StoreManagement.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.StoreTransaction", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.StoreManagement.Store", "RelatedStore")
                        .WithMany()
                        .HasForeignKey("RelatedStoreId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.StoreManagement.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StoreManagement.StoreInventory", "StoreInventory")
                        .WithMany()
                        .HasForeignKey("StoreInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProcessedByUser");

                    b.Navigation("RelatedStore");

                    b.Navigation("Store");

                    b.Navigation("StoreInventory");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.PasswordResetCode", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ExplosiveInventory.CentralWarehouseInventory", b =>
                {
                    b.Navigation("ANFOProperties");

                    b.Navigation("EmulsionProperties");

                    b.Navigation("TransferRequests");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("ProjectSites");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.Navigation("ExplosiveApprovalRequests");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Region", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("Projects");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Domain.Entities.StoreManagement.Store", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.User", b =>
                {
                    b.Navigation("ManagedStores");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

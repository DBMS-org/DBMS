// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250705065945_RemoveDrillPointsJsonFinal")]
    partial class RemoveDrillPointsJsonFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectorType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("EndPointJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromHoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("StartPointJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToHoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.ToTable("BlastConnections");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DrillPatternId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SimulationSettingsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DrillPatternId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.ToTable("BlastSequences");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.DetonatorInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("HoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.ToTable("DetonatorInfos");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.SiteBlastingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId", "DataType")
                        .IsUnique();

                    b.ToTable("SiteBlastingData");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillHole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ActualDepth")
                        .HasColumnType("float");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Depth")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double?>("Dip")
                        .HasColumnType("float");

                    b.Property<decimal>("Easting")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Elevation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Northing")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Stemming")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DrillHoles");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Burden")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Spacing")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsActive");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.ToTable("DrillPatterns");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPoint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Burden")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<int?>("DrillPatternId")
                        .HasColumnType("int");

                    b.Property<double>("Spacing")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("X")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("DrillPatternId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.ToTable("DrillPoints");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.PatternSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Burden")
                        .HasColumnType("float");

                    b.Property<double>("Depth")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(10.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Spacing")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.ToTable("PatternSettings");
                });

            modelBuilder.Entity("Domain.Entities.MachineManagement.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToOperator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignedToProject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChassisDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RigNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecificationsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegionId");

                    b.HasIndex("Status");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId")
                        .IsUnique()
                        .HasFilter("[AssignedUserId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.HasIndex("RegionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperatorCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatternApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimulationConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSites");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6050),
                            IsActive = true,
                            Name = "Muscat",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6051)
                        },
                        new
                        {
                            Id = 2,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6058),
                            IsActive = true,
                            Name = "Dhofar",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6058)
                        },
                        new
                        {
                            Id = 3,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6061),
                            IsActive = true,
                            Name = "Musandam",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6061)
                        },
                        new
                        {
                            Id = 4,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6063),
                            IsActive = true,
                            Name = "Al Buraimi",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6064)
                        },
                        new
                        {
                            Id = 5,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6066),
                            IsActive = true,
                            Name = "Ad Dakhiliyah",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6066)
                        },
                        new
                        {
                            Id = 6,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6068),
                            IsActive = true,
                            Name = "Al Batinah North",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6069)
                        },
                        new
                        {
                            Id = 7,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6071),
                            IsActive = true,
                            Name = "Al Batinah South",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6071)
                        },
                        new
                        {
                            Id = 8,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6073),
                            IsActive = true,
                            Name = "Ash Sharqiyah South",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6073)
                        },
                        new
                        {
                            Id = 9,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6075),
                            IsActive = true,
                            Name = "Ash Sharqiyah North",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6075)
                        },
                        new
                        {
                            Id = 10,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6077),
                            IsActive = true,
                            Name = "Ad Dhahirah",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6078)
                        },
                        new
                        {
                            Id = 11,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6080),
                            IsActive = true,
                            Name = "Al Wusta",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(6080)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Module", "Action")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5862),
                            Description = "Allows creating a new user",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Create User",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5862)
                        },
                        new
                        {
                            Id = 2,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5867),
                            Description = "Allows viewing user details",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Read User",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5867)
                        },
                        new
                        {
                            Id = 3,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5870),
                            Description = "Allows editing user details",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Update User",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5870)
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5873),
                            Description = "Allows deleting a user",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Delete User",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5873)
                        },
                        new
                        {
                            Id = 5,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5875),
                            Description = "Allows creating a new project",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Create Project",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5875)
                        },
                        new
                        {
                            Id = 6,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5877),
                            Description = "Allows viewing project details",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Read Project",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5878)
                        },
                        new
                        {
                            Id = 7,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5880),
                            Description = "Allows editing project details",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Update Project",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5880)
                        },
                        new
                        {
                            Id = 8,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5882),
                            Description = "Allows deleting a project",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Delete Project",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5882)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5610),
                            Description = "Administrator with full access",
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5613)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5619),
                            Description = "Manages blasting operations",
                            IsActive = true,
                            Name = "Blasting Engineer",
                            NormalizedName = "BLASTING_ENGINEER",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5620)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5623),
                            Description = "Manages mechanical tasks",
                            IsActive = true,
                            Name = "Mechanical Engineer",
                            NormalizedName = "MECHANICAL_ENGINEER",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5623)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5625),
                            Description = "Manages machine inventory and assignments",
                            IsActive = true,
                            Name = "Machine Manager",
                            NormalizedName = "MACHINE_MANAGER",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5626)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5628),
                            Description = "Manages explosive materials",
                            IsActive = true,
                            Name = "Explosive Manager",
                            NormalizedName = "EXPLOSIVE_MANAGER",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5628)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5630),
                            Description = "Manages store inventory",
                            IsActive = true,
                            Name = "Store Manager",
                            NormalizedName = "STORE_MANAGER",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5630)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5632),
                            Description = "Operates machinery",
                            IsActive = true,
                            Name = "Operator",
                            NormalizedName = "OPERATOR",
                            UpdatedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5632)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5977),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5982),
                            IsActive = true,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5983),
                            IsActive = true,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5985),
                            IsActive = true,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5986),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5987),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5989),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5990),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            GrantedAt = new DateTime(2025, 7, 5, 6, 59, 45, 75, DateTimeKind.Utc).AddTicks(5991),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OmanPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastConnection", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastSequence", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPattern", "DrillPattern")
                        .WithMany("BlastSequences")
                        .HasForeignKey("DrillPatternId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DrillPattern");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.DetonatorInfo", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.SiteBlastingData", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPattern", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPoint", b =>
                {
                    b.HasOne("Domain.Entities.DrillingOperations.DrillPattern", "DrillPattern")
                        .WithMany("DrillPoints")
                        .HasForeignKey("DrillPatternId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrillPattern");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.PatternSettings", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.MachineManagement.Machine", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany("Machines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "Region")
                        .WithMany("Machines")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Operator");

                    b.Navigation("Project");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "RegionNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedUser");

                    b.Navigation("RegionNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany("ProjectSites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.PasswordResetCode", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPattern", b =>
                {
                    b.Navigation("BlastSequences");

                    b.Navigation("DrillPoints");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("ProjectSites");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Region", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

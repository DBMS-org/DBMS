// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250622095821_AddMachineEntity")]
    partial class AddMachineEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.BlastSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DrillPatternId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SimulationSettingsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DrillPatternId");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.ToTable("BlastSequences");
                });

            modelBuilder.Entity("Core.Entities.DrillHole", b =>
                {
                    b.Property<int>("SerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerialNumber"));

                    b.Property<double>("ActualDepth")
                        .HasColumnType("float");

                    b.Property<double>("Azimuth")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<double>("Dip")
                        .HasColumnType("float");

                    b.Property<double>("Easting")
                        .HasColumnType("float");

                    b.Property<double>("Elevation")
                        .HasColumnType("float");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Northing")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Stemming")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SerialNumber");

                    b.ToTable("DrillHoles");
                });

            modelBuilder.Entity("Core.Entities.DrillPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Burden")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DrillPointsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Spacing")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.ToTable("DrillPatterns");
                });

            modelBuilder.Entity("Core.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToOperator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignedToProject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChassisDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RigNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecificationsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Core.Entities.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("UserId", "Code");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Module", "Action")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "View",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4371),
                            Description = "Can view user list",
                            IsActive = true,
                            Module = "Users",
                            Name = "View Users",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4371)
                        },
                        new
                        {
                            Id = 2,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4376),
                            Description = "Can create new users",
                            IsActive = true,
                            Module = "Users",
                            Name = "Create User",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4376)
                        },
                        new
                        {
                            Id = 3,
                            Action = "Edit",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4380),
                            Description = "Can edit user details",
                            IsActive = true,
                            Module = "Users",
                            Name = "Edit User",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4380)
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4383),
                            Description = "Can delete users",
                            IsActive = true,
                            Module = "Users",
                            Name = "Delete User",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4383)
                        },
                        new
                        {
                            Id = 5,
                            Action = "View",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4386),
                            Description = "Can view dashboard",
                            IsActive = true,
                            Module = "Dashboard",
                            Name = "View Dashboard",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4386)
                        },
                        new
                        {
                            Id = 6,
                            Action = "Upload",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4388),
                            Description = "Can upload CSV files",
                            IsActive = true,
                            Module = "DrillHole",
                            Name = "Upload CSV",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4389)
                        },
                        new
                        {
                            Id = 7,
                            Action = "View",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4391),
                            Description = "Can view drill holes",
                            IsActive = true,
                            Module = "DrillHole",
                            Name = "View DrillHoles",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4391)
                        },
                        new
                        {
                            Id = 8,
                            Action = "View",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4394),
                            Description = "Can view project list",
                            IsActive = true,
                            Module = "Projects",
                            Name = "View Projects",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4394)
                        },
                        new
                        {
                            Id = 9,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4396),
                            Description = "Can create new projects",
                            IsActive = true,
                            Module = "Projects",
                            Name = "Create Project",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4397)
                        },
                        new
                        {
                            Id = 10,
                            Action = "Edit",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4399),
                            Description = "Can edit project details",
                            IsActive = true,
                            Module = "Projects",
                            Name = "Edit Project",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4399)
                        },
                        new
                        {
                            Id = 11,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4401),
                            Description = "Can delete projects",
                            IsActive = true,
                            Module = "Projects",
                            Name = "Delete Project",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4402)
                        });
                });

            modelBuilder.Entity("Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId")
                        .IsUnique()
                        .HasFilter("[AssignedUserId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedUserId = 1,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4562),
                            Description = "Major highway development project in Muscat region",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Muscat Infrastructure Development - Highway Construction",
                            Region = "Muscat",
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4563)
                        },
                        new
                        {
                            Id = 2,
                            AssignedUserId = 1,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4570),
                            Description = "Mining site expansion project in Dhofar region",
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dhofar Mining Operations - Site Development",
                            Region = "Dhofar",
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4570)
                        },
                        new
                        {
                            Id = 3,
                            AssignedUserId = 1,
                            CreatedAt = new DateTime(2024, 12, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4576),
                            Description = "Industrial zone construction project in Sohar",
                            EndDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sohar Industrial Zone - Development",
                            Region = "Al Batinah North",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            UpdatedAt = new DateTime(2025, 5, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4588)
                        });
                });

            modelBuilder.Entity("Core.Entities.ProjectSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsOperatorCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatternApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimulationConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Coordinates = "{\"Latitude\":23.5880,\"Longitude\":58.3829}",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4626),
                            Description = "Primary construction site for highway project",
                            IsOperatorCompleted = false,
                            IsPatternApproved = false,
                            IsSimulationConfirmed = false,
                            Location = "Muscat Highway Junction",
                            Name = "Muscat Main Site",
                            ProjectId = 1,
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4627)
                        },
                        new
                        {
                            Id = 2,
                            Coordinates = "{\"Latitude\":17.0194,\"Longitude\":54.1085}",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4632),
                            Description = "Main mining pit for ore extraction",
                            IsOperatorCompleted = false,
                            IsPatternApproved = false,
                            IsSimulationConfirmed = false,
                            Location = "Dhofar Mining Area",
                            Name = "Dhofar Mining Pit A",
                            ProjectId = 2,
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4633)
                        });
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4117),
                            Description = "Administrator with full access",
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4120)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4127),
                            Description = "Blasting Engineer with technical access",
                            IsActive = true,
                            Name = "BlastingEngineer",
                            NormalizedName = "BLASTINGENGINEER",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4128)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4131),
                            Description = "Mechanical Engineer with analysis and design access",
                            IsActive = true,
                            Name = "MechanicalEngineer",
                            NormalizedName = "MECHANICALENGINEER",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4131)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4134),
                            Description = "Operator with operational access",
                            IsActive = true,
                            Name = "Operator",
                            NormalizedName = "OPERATOR",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4134)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4136),
                            Description = "Machine Manager with machinery operational access",
                            IsActive = true,
                            Name = "MachineManager",
                            NormalizedName = "MACHINEMANAGER",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4137)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4139),
                            Description = "Explosive Manager with explosives handling and safety access",
                            IsActive = true,
                            Name = "ExplosiveManager",
                            NormalizedName = "EXPLOSIVEMANAGER",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4139)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4141),
                            Description = "Store Manager with inventory and supply chain access",
                            IsActive = true,
                            Name = "StoreManager",
                            NormalizedName = "STOREMANAGER",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4142)
                        });
                });

            modelBuilder.Entity("Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Core.Entities.SiteBlastingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId", "DataType")
                        .IsUnique();

                    b.ToTable("SiteBlastingData");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OmanPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Oman",
                            CountryPhone = "+968 9999 9999",
                            CreatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4504),
                            Email = "admin@dbms.com",
                            Name = "System Administrator",
                            OmanPhone = "+968 9999 9999",
                            PasswordHash = "$2a$11$K8QQfR6Z5j6XgkHjWo9xXeNqO7QDj9qQVvjBZjR8g1jzQzKL9Yd3W",
                            Region = "Muscat",
                            Role = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 6, 22, 9, 58, 20, 354, DateTimeKind.Utc).AddTicks(4504)
                        });
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.BlastSequence", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.DrillPattern", "DrillPattern")
                        .WithMany("BlastSequences")
                        .HasForeignKey("DrillPatternId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DrillPattern");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Core.Entities.DrillPattern", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Core.Entities.Machine", b =>
                {
                    b.HasOne("Core.Entities.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Operator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entities.PasswordResetCode", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Project", b =>
                {
                    b.HasOne("Core.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("Core.Entities.ProjectSite", b =>
                {
                    b.HasOne("Core.Entities.Project", "Project")
                        .WithMany("ProjectSites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entities.RolePermission", b =>
                {
                    b.HasOne("Core.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.SiteBlastingData", b =>
                {
                    b.HasOne("Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.DrillPattern", b =>
                {
                    b.Navigation("BlastSequences");
                });

            modelBuilder.Entity("Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Core.Entities.Project", b =>
                {
                    b.Navigation("ProjectSites");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

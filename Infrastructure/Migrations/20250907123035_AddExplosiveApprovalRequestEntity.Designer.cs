// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250907123035_AddExplosiveApprovalRequestEntity")]
    partial class AddExplosiveApprovalRequestEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConnectorType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("Point1DrillPointId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Point2DrillPointId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Sequence");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.HasIndex("Point1DrillPointId", "ProjectId", "SiteId");

                    b.HasIndex("Point2DrillPointId", "ProjectId", "SiteId");

                    b.ToTable("BlastConnections", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.DetonatorInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("DrillPointId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("DrillPointId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.HasIndex("DrillPointId", "ProjectId", "SiteId");

                    b.ToTable("DetonatorInfos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.SiteBlastingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId", "DataType")
                        .IsUnique();

                    b.ToTable("SiteBlastingData");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillHole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ActualDepth")
                        .HasColumnType("float");

                    b.Property<double?>("Azimuth")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Depth")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double?>("Dip")
                        .HasColumnType("float");

                    b.Property<decimal>("Easting")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Elevation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Northing")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Stemming")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DrillHoles");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPoint", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Burden")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depth")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Diameter")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.89000000000000001);

                    b.Property<double>("Spacing")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Stemming")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(3.0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("X")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.HasKey("Id", "ProjectId", "SiteId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId");

                    b.HasIndex("X", "Y", "ProjectId", "SiteId");

                    b.ToTable("DrillPoints", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.ExplosiveCalculationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AnfoCoveringSpace")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("AnfoDensity")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("AnfoPerMeter")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("AverageDepth")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<string>("CalculationId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("EmulsionCoveringSpace")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EmulsionDensity")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EmulsionPerHole")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("EmulsionPerMeter")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFilledHoles")
                        .HasColumnType("int");

                    b.Property<int>("OwningUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PatternSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double>("RemainingSpace")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAnfo")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalDepth")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalEmulsion")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalVolume")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CalculationId")
                        .IsUnique();

                    b.HasIndex("OwningUserId");

                    b.HasIndex("PatternSettingsId");

                    b.HasIndex("SiteId");

                    b.HasIndex("ProjectId", "SiteId")
                        .IsUnique()
                        .HasDatabaseName("IX_ExplosiveCalculationResults_ProjectSite_Unique");

                    b.HasIndex("ProjectId", "SiteId", "CreatedAt")
                        .HasDatabaseName("IX_ExplosiveCalculationResults_ProjectSite_CreatedAt");

                    b.ToTable("ExplosiveCalculationResults", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.PatternSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Burden")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(2.5);

                    b.Property<double>("Depth")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(10.0);

                    b.Property<double>("Diameter")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(0.89000000000000001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<double>("Spacing")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(3.0);

                    b.Property<double>("Stemming")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)")
                        .HasDefaultValue(3.0);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SiteId");

                    b.ToTable("PatternSettings");
                });

            modelBuilder.Entity("Domain.Entities.MachineManagement.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToOperator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignedToProject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChassisDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RigNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecificationsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegionId");

                    b.HasIndex("Status");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ExplosiveApprovalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalType")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnvironmentalAssessmentCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("EstimatedDurationHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpectedUsageDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectSiteId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("SafetyChecklistCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpectedUsageDate")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_ExpectedUsageDate");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("ProjectSiteId")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_ProjectSiteId");

                    b.HasIndex("RequestedByUserId")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_RequestedByUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_Status");

                    b.HasIndex("ProjectSiteId", "Status")
                        .HasDatabaseName("IX_ExplosiveApprovalRequests_ProjectSite_Status");

                    b.ToTable("ExplosiveApprovalRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId")
                        .IsUnique()
                        .HasFilter("[AssignedUserId] IS NOT NULL");

                    b.HasIndex("Name");

                    b.HasIndex("RegionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOperatorCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatternApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSimulationConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSites");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9212),
                            IsActive = true,
                            Name = "Muscat",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9213)
                        },
                        new
                        {
                            Id = 2,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9224),
                            IsActive = true,
                            Name = "Dhofar",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9225)
                        },
                        new
                        {
                            Id = 3,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9227),
                            IsActive = true,
                            Name = "Musandam",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9228)
                        },
                        new
                        {
                            Id = 4,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9230),
                            IsActive = true,
                            Name = "Al Buraimi",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9230)
                        },
                        new
                        {
                            Id = 5,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9232),
                            IsActive = true,
                            Name = "Ad Dakhiliyah",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9233)
                        },
                        new
                        {
                            Id = 6,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9235),
                            IsActive = true,
                            Name = "Al Batinah North",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9235)
                        },
                        new
                        {
                            Id = 7,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9237),
                            IsActive = true,
                            Name = "Al Batinah South",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9238)
                        },
                        new
                        {
                            Id = 8,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9239),
                            IsActive = true,
                            Name = "Ash Sharqiyah South",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9240)
                        },
                        new
                        {
                            Id = 9,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9242),
                            IsActive = true,
                            Name = "Ash Sharqiyah North",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9242)
                        },
                        new
                        {
                            Id = 10,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9244),
                            IsActive = true,
                            Name = "Ad Dhahirah",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9244)
                        },
                        new
                        {
                            Id = 11,
                            Country = "Oman",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9246),
                            IsActive = true,
                            Name = "Al Wusta",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9247)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Module", "Action")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9066),
                            Description = "Allows creating a new user",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Create User",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9067)
                        },
                        new
                        {
                            Id = 2,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9071),
                            Description = "Allows viewing user details",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Read User",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9072)
                        },
                        new
                        {
                            Id = 3,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9074),
                            Description = "Allows editing user details",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Update User",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9075)
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9077),
                            Description = "Allows deleting a user",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "Delete User",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9078)
                        },
                        new
                        {
                            Id = 5,
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9080),
                            Description = "Allows creating a new project",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Create Project",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9080)
                        },
                        new
                        {
                            Id = 6,
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9082),
                            Description = "Allows viewing project details",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Read Project",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9082)
                        },
                        new
                        {
                            Id = 7,
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9084),
                            Description = "Allows editing project details",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Update Project",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9085)
                        },
                        new
                        {
                            Id = 8,
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9087),
                            Description = "Allows deleting a project",
                            IsActive = true,
                            Module = "ProjectManagement",
                            Name = "Delete Project",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9087)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8770),
                            Description = "Administrator with full access",
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8774)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8786),
                            Description = "Manages blasting operations",
                            IsActive = true,
                            Name = "Blasting Engineer",
                            NormalizedName = "BLASTING_ENGINEER",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8786)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8789),
                            Description = "Manages mechanical tasks",
                            IsActive = true,
                            Name = "Mechanical Engineer",
                            NormalizedName = "MECHANICAL_ENGINEER",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8789)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8792),
                            Description = "Manages machine inventory and assignments",
                            IsActive = true,
                            Name = "Machine Manager",
                            NormalizedName = "MACHINE_MANAGER",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8792)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8794),
                            Description = "Manages explosive materials",
                            IsActive = true,
                            Name = "Explosive Manager",
                            NormalizedName = "EXPLOSIVE_MANAGER",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8795)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8797),
                            Description = "Manages store inventory",
                            IsActive = true,
                            Name = "Store Manager",
                            NormalizedName = "STORE_MANAGER",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8797)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8799),
                            Description = "Operates machinery",
                            IsActive = true,
                            Name = "Operator",
                            NormalizedName = "OPERATOR",
                            UpdatedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(8799)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9136),
                            IsActive = true,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9142),
                            IsActive = true,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9144),
                            IsActive = true,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9145),
                            IsActive = true,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9147),
                            IsActive = true,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9148),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9149),
                            IsActive = true,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9151),
                            IsActive = true,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            GrantedAt = new DateTime(2025, 9, 7, 12, 30, 34, 862, DateTimeKind.Utc).AddTicks(9152),
                            IsActive = true,
                            PermissionId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OmanPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.BlastConnection", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPoint", "Point1DrillPoint")
                        .WithMany()
                        .HasForeignKey("Point1DrillPointId", "ProjectId", "SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPoint", "Point2DrillPoint")
                        .WithMany()
                        .HasForeignKey("Point2DrillPointId", "ProjectId", "SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Point1DrillPoint");

                    b.Navigation("Point2DrillPoint");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.DetonatorInfo", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.DrillPoint", "DrillPoint")
                        .WithMany()
                        .HasForeignKey("DrillPointId", "ProjectId", "SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DrillPoint");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.BlastingOperations.SiteBlastingData", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.DrillPoint", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.ExplosiveCalculationResult", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "OwningUser")
                        .WithMany()
                        .HasForeignKey("OwningUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrillingOperations.PatternSettings", "PatternSettings")
                        .WithMany()
                        .HasForeignKey("PatternSettingsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwningUser");

                    b.Navigation("PatternSettings");

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.DrillingOperations.PatternSettings", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Domain.Entities.MachineManagement.Machine", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany("Machines")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "Region")
                        .WithMany("Machines")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Operator");

                    b.Navigation("Project");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ExplosiveApprovalRequest", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ProjectManagement.ProjectSite", "ProjectSite")
                        .WithMany("ExplosiveApprovalRequests")
                        .HasForeignKey("ProjectSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedByUser");

                    b.Navigation("ProjectSite");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManagement.Region", "RegionNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedUser");

                    b.Navigation("RegionNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManagement.Project", "Project")
                        .WithMany("ProjectSites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.PasswordResetCode", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserManagement.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Project", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("ProjectSites");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.ProjectSite", b =>
                {
                    b.Navigation("ExplosiveApprovalRequests");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManagement.Region", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.UserManagement.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

using AutoMapper;
using Application.DTOs.MaintenanceOperations;
using Domain.Entities.MaintenanceOperations;
using Domain.Entities.MaintenanceOperations.Enums;
using System.Text.Json;

namespace Application.Mapping
{
    /// <summary>
    /// AutoMapper profile for Maintenance Operations mappings
    /// </summary>
    public class MaintenanceOperationsMappingProfile : Profile
    {
        public MaintenanceOperationsMappingProfile()
        {
            // MaintenanceReport mappings
            CreateMap<MaintenanceReport, MaintenanceReportDto>()
                .ForMember(dest => dest.OperatorName, opt => opt.MapFrom(src => src.Operator != null ? src.Operator.Name : string.Empty))
                .ForMember(dest => dest.OperatorEmail, opt => opt.MapFrom(src => src.Operator != null ? src.Operator.Email.Value : null))
                .ForMember(dest => dest.OperatorPhone, opt => opt.MapFrom(src => src.Operator != null ? src.Operator.OmanPhone : null))
                .ForMember(dest => dest.MachineName, opt => opt.MapFrom(src =>
                    !string.IsNullOrEmpty(src.MachineName) ? src.MachineName :
                    (src.Machine != null ? src.Machine.Name : string.Empty)))
                .ForMember(dest => dest.MachineModel, opt => opt.MapFrom(src =>
                    src.MachineModel ?? (src.Machine != null ? src.Machine.Model : null)))
                .ForMember(dest => dest.SerialNumber, opt => opt.MapFrom(src =>
                    src.SerialNumber ?? (src.Machine != null ? src.Machine.SerialNumber : null)))
                .ForMember(dest => dest.Location, opt => opt.MapFrom(src =>
                    src.Location ?? (src.Machine != null ? src.Machine.CurrentLocation : null)))
                .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Machine != null && src.Machine.Project != null ? src.Machine.Project.Name : null))
                .ForMember(dest => dest.ProjectId, opt => opt.MapFrom(src => src.Machine != null ? src.Machine.ProjectId : null))
                .ForMember(dest => dest.RegionName, opt => opt.MapFrom(src => src.Machine != null && src.Machine.Region != null ? src.Machine.Region.Name : null))
                .ForMember(dest => dest.RegionId, opt => opt.MapFrom(src => src.Machine != null ? src.Machine.RegionId : null))
                .ForMember(dest => dest.MechanicalEngineerEmail, opt => opt.MapFrom(src => src.MechanicalEngineer != null ? src.MechanicalEngineer.Email.Value : null))
                .ForMember(dest => dest.MechanicalEngineerPhone, opt => opt.MapFrom(src => src.MechanicalEngineer != null ? src.MechanicalEngineer.OmanPhone : null))
                .ForMember(dest => dest.AffectedPart, opt => opt.MapFrom(src => src.AffectedPart.ToString()))
                .ForMember(dest => dest.ProblemCategory, opt => opt.MapFrom(src => src.ProblemCategory.ToString()))
                .ForMember(dest => dest.Severity, opt => opt.MapFrom(src => src.Severity.ToString()))
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
                .ForMember(dest => dest.Symptoms, opt => opt.MapFrom(src => DeserializeSymptoms(src.Symptoms)));

            CreateMap<SubmitMaintenanceReportRequest, MaintenanceReport>()
                .ForMember(dest => dest.TicketId, opt => opt.Ignore()) // Generated by entity
                .ForMember(dest => dest.MachineName, opt => opt.Ignore()) // Set by service
                .ForMember(dest => dest.MachineModel, opt => opt.Ignore())
                .ForMember(dest => dest.SerialNumber, opt => opt.Ignore())
                .ForMember(dest => dest.Location, opt => opt.Ignore())
                .ForMember(dest => dest.AffectedPart, opt => opt.MapFrom(src => Enum.Parse<MachinePart>(src.AffectedPart)))
                .ForMember(dest => dest.ProblemCategory, opt => opt.MapFrom(src => Enum.Parse<ProblemCategory>(src.ProblemCategory)))
                .ForMember(dest => dest.Severity, opt => opt.MapFrom(src => Enum.Parse<SeverityLevel>(src.Severity)))
                .ForMember(dest => dest.Symptoms, opt => opt.MapFrom(src => SerializeSymptoms(src.Symptoms)))
                .ForMember(dest => dest.Status, opt => opt.Ignore())
                .ForMember(dest => dest.ReportedAt, opt => opt.Ignore())
                .ForMember(dest => dest.AcknowledgedAt, opt => opt.Ignore())
                .ForMember(dest => dest.InProgressAt, opt => opt.Ignore())
                .ForMember(dest => dest.ResolvedAt, opt => opt.Ignore())
                .ForMember(dest => dest.ClosedAt, opt => opt.Ignore())
                .ForMember(dest => dest.MechanicalEngineerId, opt => opt.Ignore())
                .ForMember(dest => dest.MechanicalEngineerName, opt => opt.Ignore())
                .ForMember(dest => dest.ResolutionNotes, opt => opt.Ignore())
                .ForMember(dest => dest.EstimatedResponseTime, opt => opt.Ignore())
                .ForMember(dest => dest.RecentMaintenanceHistory, opt => opt.Ignore())
                .ForMember(dest => dest.Operator, opt => opt.Ignore())
                .ForMember(dest => dest.Machine, opt => opt.Ignore())
                .ForMember(dest => dest.MechanicalEngineer, opt => opt.Ignore())
                .ForMember(dest => dest.MaintenanceJob, opt => opt.Ignore());

            // MaintenanceJob mappings
            CreateMap<MaintenanceJob, MaintenanceJobDto>()
                .ForMember(dest => dest.MachineName, opt => opt.MapFrom(src => src.Machine != null ? src.Machine.Name : string.Empty))
                .ForMember(dest => dest.MachineModel, opt => opt.MapFrom(src => src.Machine != null ? src.Machine.Model : string.Empty))
                .ForMember(dest => dest.SerialNumber, opt => opt.MapFrom(src => src.Machine != null ? src.Machine.SerialNumber : string.Empty))
                .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Project != null ? src.Project.Name : null))
                .ForMember(dest => dest.ReportTicketId, opt => opt.MapFrom(src => src.MaintenanceReport != null ? src.MaintenanceReport.TicketId : null))
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => src.Type.ToString()))
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
                .ForMember(dest => dest.PartsReplaced, opt => opt.MapFrom(src => DeserializePartsReplaced(src.PartsReplaced)))
                .ForMember(dest => dest.Assignments, opt => opt.MapFrom(src => src.Assignments))
                .ForMember(dest => dest.Symptoms, opt => opt.MapFrom(src => src.MaintenanceReport != null ? DeserializeSymptoms(src.MaintenanceReport.Symptoms) : null))
                .ForMember(dest => dest.ErrorCodes, opt => opt.MapFrom(src => src.MaintenanceReport != null ? src.MaintenanceReport.ErrorCodes : null))
                .ForMember(dest => dest.Severity, opt => opt.MapFrom(src => src.MaintenanceReport != null ? src.MaintenanceReport.Severity.ToString() : null));

            CreateMap<CreateManualJobRequest, MaintenanceJob>()
                .ForMember(dest => dest.Type, opt => opt.MapFrom(src => Enum.Parse<MaintenanceType>(src.Type)))
                .ForMember(dest => dest.Status, opt => opt.Ignore())
                .ForMember(dest => dest.ScheduledDate, opt => opt.MapFrom(src => src.ScheduledDate ?? DateTime.UtcNow))
                .ForMember(dest => dest.CompletedDate, opt => opt.Ignore())
                .ForMember(dest => dest.InProgressAt, opt => opt.Ignore())
                .ForMember(dest => dest.ActualHours, opt => opt.Ignore())
                .ForMember(dest => dest.Observations, opt => opt.Ignore())
                .ForMember(dest => dest.PartsReplaced, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedBy, opt => opt.Ignore()) // Set by service
                .ForMember(dest => dest.Machine, opt => opt.Ignore())
                .ForMember(dest => dest.Project, opt => opt.Ignore())
                .ForMember(dest => dest.MaintenanceReport, opt => opt.Ignore())
                .ForMember(dest => dest.Creator, opt => opt.Ignore())
                .ForMember(dest => dest.Assignments, opt => opt.Ignore());

            // MaintenanceJobAssignment mappings
            CreateMap<MaintenanceJobAssignment, MaintenanceJobAssignmentDto>()
                .ForMember(dest => dest.MechanicalEngineerName, opt => opt.MapFrom(src => src.MechanicalEngineer != null ? src.MechanicalEngineer.Name : string.Empty));

            // OperatorMachine mapping
            CreateMap<Domain.Entities.MachineManagement.Machine, OperatorMachineDto>()
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
                .ForMember(dest => dest.ProjectName, opt => opt.MapFrom(src => src.Project != null ? src.Project.Name : null))
                .ForMember(dest => dest.RegionName, opt => opt.MapFrom(src => src.Region != null ? src.Region.Name : null));
        }

        // Helper methods for JSON serialization/deserialization
        private static List<string>? DeserializeSymptoms(string? json)
        {
            if (string.IsNullOrWhiteSpace(json))
                return null;

            try
            {
                return JsonSerializer.Deserialize<List<string>>(json);
            }
            catch
            {
                return null;
            }
        }

        private static string? SerializeSymptoms(List<string>? symptoms)
        {
            if (symptoms == null || symptoms.Count == 0)
                return null;

            try
            {
                return JsonSerializer.Serialize(symptoms);
            }
            catch
            {
                return null;
            }
        }

        private static List<string>? DeserializePartsReplaced(string? json)
        {
            if (string.IsNullOrWhiteSpace(json))
                return null;

            try
            {
                return JsonSerializer.Deserialize<List<string>>(json);
            }
            catch
            {
                return null;
            }
        }
    }
}
